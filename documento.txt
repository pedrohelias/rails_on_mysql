1o passo: rails new "projeto" --database=mysql
2o passo:  gem install mysql2 no projeto(duvida no comando, checar em database.yml )
3o passo: bundle install
4o passo: rails generate scaffold customer name:string email:string birthday:date obs:text (vai criar views, controllers, migrate, entre outros)
5o passo: rake db:create (para criar as base de dados do projeto, geralmente nomeDoProjeto_development e nomeDoProjeto_test)
6o_passo: rake db:migrate (migrar os dados realizados no 4 passo e criar a tabela de referencia dentro da base de dados). 
7o_passo: É possível observar a tabela criada acessnado o mysql no terminal. 

======================================================================================================


MODELS
Na pasta app, após o scaffold a pasta Models foi prenchida. Um arquivo chamado customer.rb "vazio" com apenas uma única especificação de herança, herdando a classe ActiveRecord::Base. O Active Record é um dos frameworks que constituem o Rails e que toma conta da persistência do banco de dados. Ele que vai fazer a comunicação com o banco de dados e correlacionar com a classe, é um ORM. Sendo assim, ele vai procurar pela tabela correspondente(apenas pelo fato de herdar). O Costumer tem uma tabela gerada na base de dados Customers no plural. Seguindo a convenção nome do model no singular e noma da tabela no plural 

Rails Console ou Rails c -> Vai abrir o console do rails, em um ambiente que vai carregar todas as classes disponiveis no projeto rails. Semelhante ao IRB. Se eu fizesse um a = Customer.first, a variavel a seria composta pelo primeiro elemento da tabela Customers no banco de dados. E isso tudo é possível por conta do ActiveRecord, de fazer a relaçaõ entre classe e banco de dados.


CONTROLERS 

Por convenção o Rails cria um arquivo com o nome da classe no plural + underscore + controller 
No controller, se coloca as ações no sistema, os métodos no padrão:

def action
    #code 
end 

em customers_controller ele cria todos os métodos que solicitamos scaffold. Essa classe herda diretamente de ApplicationController. Existe uma convenção no Rails que pra toda Action eu preciso  ter uma view. Este arquivo é repleto de ações, como a index. A maioria possui. 

Lembrando que variaveis de instancias são iniciadas por @, e dessa forma poderemos utilizar em outra ações. Ou seja, quando definimos uma @variavel, podemos utilizar ela entre o controller e a view. Consigo utilizar uma variavel criada dessa forma na controoler dentro da view. 

=====================================================================================

ROTAS 

o arquivo config/routes.rb possui as rotas do projeto, que serão encontradas a partir da url 

Vamos criar uma rota na mão, mas pra isso precisamos de um controller tambem. Então, para tal: 
rails g controller welcome => Vai gerar(o g é de generate) um controller chamado welcome nos controllers
Dentro de view ele também automaticamente criou uma pasta para definirmos a view desse controller novo 

Agora é só escrever o codigo que se deseja dentro da controller criada welcome_controller.rb 
Com o código produzido, é hora de criar a view. Como o generator apenas criou a pasta, precisaremos criar o arquivo. Então, seu nome será index.html.erb pois o nome da action criada na classe welcome_controller é index, html pois é uma página virtual web, e erb para definir a mistura de html com ruby. 

Para unir a rota da view criada relativa a action index, devemos definir a rota na config/routes.rb 
Uma rapida explicação sobre verbo http. Nos primórdios, foi criado o verbo http Get (vai pegar o que se digitou na pagina e busca no servidor) e http post (vai gravar alguma coisa na web, envio de dados pelo servidor). Para definir uma rota no ruby, primeiramente define-se o verbo (nesse caso get), depois o nome da rota(no caso "inicio"), e por fim o apontamento dessa rota, no caso para a controller welcome que criamos, e para o action "index". 
EScrevendo na sintaxe, temos: 

get "inicio" => "welcome#index"

Um bom teste a ser feito é na classe welcome_controller, a action index, definirmos uma variavel la. No caso, criamos  @teste = "Estou aprendendo rails"

Ja no arquivo da view, para mostrar essa variavel, utilizaremos a estrtuura <%= VARIAVEL %>
No caso, fica assim: <h3><%=@index%></h3>

Para encontrar no browse, é só procurar por "inicio"

Sobre os HELPERS

ActionView::Helpers     link_to (serve para redirecionar paginas )

Então, para isso faremos: 

<%= link_to "Cadastro de Clientes", "/customers"%>

Sendo link_to uma sintaxe normal, o primeiro nome refere-se ao nome do texto, e o segundo nome refere-se ao link que deseja-se acessar. Dessa forma descrita acima e composta pela tag <%=%>
Apesar de nao ser a forma mais correta de se acessar 

Caso acessemos rails/info/routas no url, vamos encontrar todas as rotas disponiveis no projeto. ACessando essa pagina, vimos que a rota para costumer é descrita simplesmente como "customers_path". Ao substituirmos no codigo, vimos que funciona igualmente 
